openapi: 3.0.1
info:
  title: AM-Central-365 API
  description: Automation Central 365 API
  version: 0.0.1

#  The API principles:
#    Inspired by https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api#restful
#
#    http://~path~
#      GET    returns list of resources at path.
#             - Adding  &fields=A,B returns JSON array of [ {A:a1, B:b1}, {A:a2, B:b3}. ...}
#             - Adding  &field=X returns JSON array of [ x1, x2, x3, ... ]
#             "field" and "fields" are mutually exclusive
#      POST   create a resources
#             the body is a JSON structure.
#
#    http://~path~/resource-id
#      GET     return all details about the resource.
#      POST:   update the resource. The request body is a JSON object with { attr1: value1, ... } map.
#              Only supplied fields are updated. Must supply OptLock if the resource has it (obtained by GET).
#      DELETE: delete the resource. Must supply OptLock if the resource has it
#
#  NOTE:
#   | Alternative approach, wasn't chosen for implementation:
#   |   POST   is used for both CREATE and UPDATE. JSON object is passed. All PK fields must be either
#   |          present or omitted. When all PK fields are present its an update, otherwise create.
#   |          When updating, the missing fields are not modified. This makes it impossible to set field
#   |          value to NULL, but it is ok with our schema. Updates usually require the OptLock value.
#   |  PUT    is identical to POST.
#
# The body encoding is x-www-form-urlencoded
# Using multipart/form-data would be a special case and wasn't so far needed
#
# On create or update, the response format is:
#   {pk: {pk1: v1, pk2: v2, ...} optLock: {col: val}}   # The optLock part is optional
#

servers:
  - url: /v0.1  # must match API_BASE in src/main/kotlin/com/amcentral365/service/WebServer.kt

definitions:
 GenericResponse:
   type: object
   properties:
     code:    { type: integer, description: The response code. In most cases on of HTTP codes, but sometimes a cusimt value. 200 meanss ok }
     message: { type: string,  descriprion: The message. When code is 200 (success), the message is OK }
     cause:   { type: object,  description: The inner error, if any. Has the same structure as ErrorResponse }
   required:  [code, message]

 SQLErrorResponse:
   type: object
   properties:
     code:     { type: integer, description: The response code. In most cases on of HTTP codes, but sometimes a cusimt value. 200 meanss ok }
     message:  { type: string,  descriprion: The message. When code is 200 (success), the message is OK }
     SQLState: { type: string,  descriprion: "ANSI SQL and/or ODBC error code. Code HY000 indicates general error" }
     SQLError: { type: integer, description: "MySQL-specific error code" }
     sql:      { type: string,  descriprion: "The problem statement. Bind placeholders are replaced with actual values, truncated if needed"  }
     cause:    { type: GenericResponse, description: The inner error, if any. Has the same structure as ErrorResponse }
   required:  [code, message, SQLState, SQLError, sql]


components:
  responses:
    object_data:
      content:
        application/json:

    code_message:
      content:
        application/json:
          schema:
            type: object
            properties:
              code:     { type: integer, description: The response code. In most cases on of HTTP codes, but sometimes a cusimt value. 200 meanss ok }
              message:  { type: string,  descriprion: The message. When code is 200 (success), the message is OK }
            required: [code, message]

    code_mesage_cause:
      content:
        application/json:
          schema:
            type: object
            properties:
              code:     { type: integer, description: The response code. In most cases on of HTTP codes, but sometimes a cusimt value. 200 meanss ok }
              message:  { type: string,  descriprion: The message. When code is 200 (success), the message is OK }
              cause:    { type: object,  description: Nested code_mesage_cause }
            required: [code, message]

    200_dml_ok:          { allOf: [{$ref: '#/components/responses/code_message'}], description: Success }
    200_read_ok:         { allOf: [{$ref: '#/components/responses/object_data'}],  description: Returns the object's data }
    201_created:         { allOf: [{$ref: '#/components/responses/code_message'}], description: Created/Submitted the resource }
    400_bad_input:       { allOf: [{$ref: '#/components/responses/code_message'}], description: Something is wrong with the input data, see the message }
    404_not_found:       { allOf: [{$ref: '#/components/responses/code_message'}], description: The requested resource was not found }
    406_not_acceptable:  { allOf: [{$ref: '#/components/responses/code_message'}], description: Validation failed for one of the input components }
    409_already_exists:  { allOf: [{$ref: '#/components/responses/code_message'}], description: The resource already exists }
    410_optlock_failure: { allOf: [{$ref: '#/components/responses/code_message'}], description: Gone. Optimistic lock update failed because the record was modified or PK does not exist. Re-read the record }

    500_server_error:
      description: Server error, see the messsage
      allOf:
      - $ref: '#/components/responses/code_mesage_cause'

    read_resource:
      200: { $ref: '#/components/responses/200_read_ok' }
      400: { $ref: '#/components/responses/400_bad_input' }
      404: { $ref: '#/components/responses/404_not_found' }
      500: { $ref: '#/components/responses/500_server_error' }

    create_resource:
      201: { $ref: '#/components/responses/201_created' }
      406: { $ref: '#/components/responses/406_not_acceptable' }
      409: { $ref: '#/components/responses/409_already_exists' }
      400: { $ref: '#/components/responses/400_bad_input' }
      500: { $ref: '#/components/responses/500_server_error' }

    update_resource:
      200: { $ref: '#/components/responses/200_dml_ok' }
      400: { $ref: '#/components/responses/400_bad_input' }
      406: { $ref: '#/components/responses/406_not_acceptable' }
      410: { $ref: '#/components/responses/410_optlock_failure' }
      500: { $ref: '#/components/responses/500_server_error' }

    delete_resource:
      200: { $ref: '#/components/responses/200_dml_ok' }
      410: { $ref: '#/components/responses/410_optlock_failure' }
      400: { $ref: '#/components/responses/400_bad_input' }
      500: { $ref: '#/components/responses/500_server_error' }

    start_resource:
      201: { $ref: '#/components/responses/201_created' }
      406: { $ref: '#/components/responses/406_not_acceptable' }
      400: { $ref: '#/components/responses/400_bad_input' }
      500: { $ref: '#/components/responses/500_server_error' }

  schemas:
    executor_role:
      type: string
      enum:
        - com.amc.script-executor-amc
        - com.amc.script-executor-ssh

paths:
  /publicKey:
   get:
     summary: Get amcentral365 public key as plain text
     description: Append this key to ~/.ssh/authorized_keys on all managed machines
     tags: [Other]
     produces:  [text/plain]
     responses:
       200: { description: "the key contents" }

  # ------------------- admin
  /admin/data:
    $ref: 'api/admin_data.yml#root'

  /admin/data/script_stores:
    $ref: 'api/admin_data.yml#script_stores'


  # ------------------- catalog roles
  /catalog/roles:
    $ref: 'api/catalog_roles.yml#root'

  /catalog/roles/{roleName}:
    $ref: 'api/catalog_roles.yml#$role_name'

  # ------------------- catalog assets
  /catalog/assets:
    $ref: 'api/catalog_assets.yml#root'

  /catalog/assets/{assetKey}:
    $ref: 'api/catalog_assets.yml#$asset'

  /catalog/assets/{assetKey}/roles:
    $ref: 'api/catalog_assets.yml#$asset_roles'

  /catalog/assets/{assetKey}/roles/{roleName}:
    $ref: 'api/catalog_assets.yml#$asset_role'

  # ------------------- scripts: synchronous execution
  /executes:
    $ref: 'api/executes.yml#root'

  /executes/{executeId}:
    $ref: 'api/executes.yml#$execute'

  /executes/{executeId}/log:
    $ref: 'api/executes.yml#$execute_log'

  /executes/{executeId}/output:
    $ref: 'api/executes.yml#$execute_output'

  # ------------------- tasks: asynchronous execution
  /tasks:
    $ref: 'api/tasks.yml#root'
