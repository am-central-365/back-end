openapi: 3.0.1
info:
  title: AM-Central-365 API
  description: Automation Central 365 API
  version: 0.0.1

#  The API principles:
#    HEAD   gets list of names
#    GET    returns objects
#    POST   is used for both CREATE and UPDATE: when ID is present its an update, otherwise create,
#           When updating, the missing fields are not modified. This makes it impossible to set field
#           value to NULL, but it is ok with our schema. Updates usually require the OptLock value.
#    PUT    is identical to POST.
#    DELETE naturally deletes
#
#  x-www-form-urlencoded os preferred over multipart/form-data
#


servers:
  - url: /v0.1  # must match API_BASE in src/main/kotlin/com/amcentral365/service/WebServer.kt

definitions:
 GenericResponse:
   type: object
   properties:
     code:    { type: integer, description: The response code. In most cases on of HTTP codes, but sometimes a cusimt value. 200 meanss ok }
     message: { type: string,  descriprion: The message. When code is 200 (success), the message is OK }
     cause:   { type: object,  description: The inner error, if any. Has the same structure as ErrorResponse }
   required:  [code, message]

 SQLErrorResponse:
   type: object
   properties:
     code:     { type: integer, description: The response code. In most cases on of HTTP codes, but sometimes a cusimt value. 200 meanss ok }
     message:  { type: string,  descriprion: The message. When code is 200 (success), the message is OK }
     SQLState: { type: string,  descriprion: "ANSI SQL and/or ODBC error code. Code HY000 indicates general error" }
     SQLError: { type: integer, description: "MySQL-specific error code" }
     sql:      { type: string,  descriprion: "The problem statement. Bind placeholders are replaced with actual values, truncated if needed"  }
     cause:    { type: GenericResponse, description: The inner error, if any. Has the same structure as ErrorResponse }
   required:  [code, message, SQLState, SQLError, sql]


paths:
  /publicKey:
   get:
     summary: Get amcentral365 public key as plain text
     description: Append this key to ~/.ssh/authorized_keys on all managed machines
     tags: [Other]
     produces:  [text/plain]
     responses:
       200: { description: "the key contents" }

  /admin/data:
   get:
     summary: Metadata, list names of available entry points
     description: |
        Returns a JSON list of entry point names for the Admin Data API.
        An entry point name can be used as "/admin/data/"+entry-point-name to operate
        selected entity.
     tags: [Admin-Data]
     produces: [application/json]
     responses:
       200: { description: "List of entry point names as a JSON array" }


  /admin/data/script_stores:
   get:
     summary: Get list of script stores
     description: Defines where scripts can be downloaded from
     tags: [Admin-Data]
     produces: [application/json]
     parameters:
       - { in: query, name: script_store_id, schema: {type: string, format: uuid}, description: "UUID, like c0a71a05-6ade-11e8-9244-0242ac110002" }
       - { in: query, name: store_name, schema: {type: string, maximum: 255}}
       - { in: query, name: store_type, schema: {type: string, enum: [LocalFile, GitHub, Nexus]}, description: "Script store type" }
       - { in: query, name: description, schema: {type: string, maximum: 2000}}
       - { in: query, name: limit, schema: {type: integer, default: 20}, description: "Limit the number of records returned. 0 for no limit."}
     responses:
       200: { description: "List of script stores matching criteria" }
       default: { schema: { $ref: "#/definitions/GenericResponse"  }, description: "The generic response" }

   post:
     summary: Create or Update a script store record
     description: POST or PUT with the PK updates record. When PK is empty, the record is tried to be inserted.
     tags: [Admin-Data]
     requestBody:
       required: true
       content:
         application/x-www-form-urlencoded:
           schema:
             type: object
             properties:
               script_store_id: {type: string, format: uuid} #, description: "PK, UUID"
               store_name:      {type: string, maximum: 255}
               store_type:      {type: string, enum: [LocalFile, GitHub, Nexus]}
               description:     {type: string, maximum: 2000}
               modified_ts:     {type: string} #, description: "OptLock value, gets overwritten by the database"
     produces: application/json]
     responses:
       200: { description: "List of script stores matching criteria" }
       400: { description: "Something is wrong with the input data, see the message" }
       410: { description: "Gone. Optimistic lock update failed because the record was modified or PK dies not exist. Re-read the record" }
       500: { description: "Generic error, see the message" }

   delete:
     summary: Delete a script store record
     description: script stores define sources of the scripts
     tags: [Admin-Data]
     parameters:
       - { in: query, name: script_store_id, schema: {type: string, format: uuid}, description: "PK, UUID" }
       - { in: query, name: modified_ts,     schema: {type: string, format: timestamp}, description: "record modification timestamp, servers as the OptLock. yyyy-MM-dd HH:mm:ss.f"}
     produces: application/json]
     responses:
       200: { description: "List of script stores matching criteria" }
       410: { description: "Gone. Optimistic lock delete failed because the record was modified or PK dies not exist. Re-read the record" }
       500: { description: "Generic error, see the message" }


  /catalog/roles:
   head:
     summary: Get role names as a JSON array
     tags: [Core]
     produces: [application/json]
     responses:
       200: { description: "List of role names" }
       500: { description: "Generic error, see the message" }

   get:
     summary: Get list of roles and their attributes as a list of JSON objects
     tags: [Core]
     produces: [application/json]
     parameters:
       - { in: query, name: class, schema: {type: string, maximum: 100}}
     responses:
       200: { description: "List of role objects" }
       500: { description: "Generic error, see the message" }

   post:
     summary: Create a role object
     tags: [Core]
     requestBody:
       required: true
       content:
         application/x-www-form-urlencoded:
           schema:
             type: object
             properties:
               name:        {type: string, maximum: 100}
               class:       {type: string, maximum: 100}
               description: {type: string, maximum: 64000}
     responses:
       200: { description: "List of script stores matching criteria" }
       400: { description: "Something is wrong with the input data, see the message" }
       409: { description: "The role already exists" }
       500: { description: "Server error, see the message" }


  /catalog/roles/$role_name:
   get:
     summary: Get role object
     tags: [Core]
     produces: [application/json]
     responses:
       200: { description: "The role object" }
       410: { description: "Gone. Role with this name does not exist"}
       500: { description: "Generic error, see the message" }

   post:
     summary: Update a role object
     description: non-mentioned fields are not updated. Retirns PK + Optimistic Lock
     tags: [Core]
     produces: [application/json]
     requestBody:
       required: true
       content:
         application/x-www-form-urlencoded:
           schema:
             type: object
             properties:
               name:        {type: string, maximum: 100}
               class:       {type: string, maximum: 100}
               description: {type: string, maximum: 64000}
               modified_ts: {type: string, format: timestamp} #, description: "OptLock value, gets overwritten by the database"
     responses:
       200: { description: "List of script stores matching criteria" }
       400: { description: "Something is wrong with the input data, see the message" }
       410: { description: "Gone. Optimistic lock update failed because the record was modified or PK dies not exist. Re-read the record" }
       500: { description: "Generic error, see the message" }

   delete:
     summary: Delete a role object
     tags: [Core]
     parameters:
       - { in: query, name: modified_ts, schema: {type: string, format: timestamp}, description: "record modification timestamp, servers as the OptLock. yyyy-MM-dd HH:mm:ss.f"}
     produces: application/json]
     responses:
       200: { description: "List of script stores matching criteria" }
       410: { description: "Gone. Optimistic lock delete failed because the record was modified or PK dies not exist. Re-read the record" }
       500: { description: "Generic error, see the message" }


  /catalog/assets/$asset_id/roles/$role_name:
   get:
     summary: Not supported

   post:
     summary: Create or set all attributes for the asset and the role
     description: All role attributes are replaced with the specified values.
                  The parametrs format is the same as of the list returned by 'get'
                  All attributes marked 'required' must be present. This call may
                  be used for bulk attribute assignments and copying.

   delete:
     summary: Delete role associated with the asset.
     description: All role attributes are removed as well.


  /catalog/assets/$asset_id/roles/$role_name/attributes:
   head:
     summary: List names of all attributes currently associated with the role

   get:
     summary: Get values of all attributes currently associated with the role

   # post/put:
   #   could be used to add an attribute, but for that we should use
   #   /catalog/assets/$asset_id/roles/$role_name/attributes/$attr_name
   # delete:
   #   is disabled becase passing an empty attr_name by accident would delete all attributes
   #   and that is too unsafe. To delete all attributes, remove role from the asset.


  /catalog/assets/$asset_id/roles/$role_name/attributes/$attr_name:
   get:
     summary: Get specific attribute value
     description: All attributes marked as required in declared_role_attributes
                  must be specified.
   post:
     summary: Create and set the attribute or update its value if it exists

   delete:
     summary: Delete the attribute. Required attributes can't be deleted.
