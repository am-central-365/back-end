openapi: 3.0.0
info:
  title: AM-Central-365 API
  description: Automation Central 365 API
  version: 0.0.1

servers:
  - url: /v0.1  # must match API_BASE in src/main/kotlin/com/amcentral365/service/WebServer.kt

definitions:
 GenericResponse:
   type: object
   properties:
     code:    { type: integer, description: The response code. In most cases on of HTTP codes, but sometimes a cusimt value. 200 meanss ok }
     message: { type: string,  descriprion: The message. When code is 200 (success), the message is OK }
     cause:   { type: object,  description: The inner error, if any. Has the same structure as ErrorResponse }
   required:  [code, message]

 SQLErrorResponse:
   type: object
   properties:
     code:     { type: integer, description: The response code. In most cases on of HTTP codes, but sometimes a cusimt value. 200 meanss ok }
     message:  { type: string,  descriprion: The message. When code is 200 (success), the message is OK }
     SQLState: { type: string,  descriprion: "ANSI SQL and/or ODBC error code. Code HY000 indicates general error" }
     SQLError: { type: integer, description: "MySQL-specific error code" }
     sql:      { type: string,  descriprion: "The problem statement. Bind placeholders are replaced with actual values, truncated if needed"  }
     cause:    { type: GenericResponse, description: The inner error, if any. Has the same structure as ErrorResponse }
   required:  [code, message, SQLState, SQLError, sql]


paths:
  /publicKey:
   get:
     summary: Get amcentral365 public key as plain text
     description: Append this key to ~/.ssh/authorized_keys on all managed machines
     tags: [Other]
     produces:  [text/plain]
     responses:
       200: { description: "the key contents" }

  /admin/data/scriptStores:
   get:
     summary: Get list of script stores
     description: Defines where scripts can be downloaded from
     tags: [Admin-Data]
     produces: [application/json]
     parameters:
       - { in: query, name: script_store_id, schema: {type: string, format: uuid}, description: "UUID. c0a71a05-6ade-11e8-9244-0242ac110002" }
       - { in: query, name: store_name, schema: {type: string, maximum: 255}}
       - { in: query, name: store_type, schema: {type: string, enum: [LocalFile, GitHub, Nexus]}, description: "Script store type" }
       - { in: query, name: description, schema: {type: string, maximum: 2000}}
       - { in: query, name: limit, schema: {type: integer, default: 20}, description: "Limit the number of records returned. 0 for no limit."}
     responses:
       200: { description: "List of script stores matching criteria" }
       default: { schema: { $ref: "#/definitions/GenericResponse"  }, description: "The generic response" }

   post:
     summary: Create or Update a script store record
     description: script stores define sources of the scripts
     tags: [Admin-Data]
     requestBody:
       required: true
       content:
         application/x-www-form-urlencoded:
           schema:
             type: object
             properties:
               script_store_id: {type: string, format: uuid} #, description: "PK, UUID"
               store_name:      {type: string, maximum: 255}
               store_type:      {type: string, enum: [LocalFile, GitHub, Nexus]}
               description:     {type: string, maximum: 2000}
               modified_ts:     {type: string} #, description: "OptLock value, gets overwritten by the database"
     produces: application/json]
     responses:
       200: { description: "List of script stores matching criteria" }
       400: { description: "Something is wrong with the input data, see the message" }
       410: { description: "Gone. Optimistic lock update failed because the record was modified or PK dies not exist. Re-read the record" }
       500: { description: "Generic error, see the message" }

   delete:
     summary: Delete a script store record
     description: script stores define sources of the scripts
     tags: [Admin-Data]
     parameters:
       - { in: query, name: script_store_id, schema: {type: string, format: uuid}, description: "PK, UUID" }
       - { in: query, name: modified_ts, description: "record modification timestamp, servers as the OptLock. yyyy-MM-dd HH:mm:ss.f"}
     produces: application/json]
     responses:
       200: { description: "List of script stores matching criteria" }
       410: { description: "Gone. Optimistic lock delete failed because the record was modified or PK dies not exist. Re-read the record" }
       500: { description: "Generic error, see the message" }
